// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// Designated init  - Main init() for class, –≤—Å–µ init() –±–µ–∑ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏.
// Convenience init - provides more "convenient" way of creating class by re-using init() inside new init()

// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å—Ç—å 2 —Ñ–∞–∑—ã:
// 1. –ü—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–ø–µ—Ä—Ç–∏
// 2. –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –ø—Ä–æ–ø–µ—Ä—Ç–∏
class Item {
    var name: String
    var weight: Int
    
    init(name: String, weight: Int) {
        // 1 —Ñ–∞–∑–∞
        self.name = name
        self.weight = weight
        // 2 —Ñ–∞–∑–∞
        if name == "Mark" {
            self.name = "NOT mark"
        }
    }
}

 
var suitcase = Item(name: "Mark", weight: 12)
suitcase.name

// Inheritance init() Rules:
// 1. Designated init() must call Designated init() from it Superclass.
// 2. Convenience init() must call another init() from the same class.
// 3. Convenience init() must ultimately call a Designated init().
// ------- a Simple way to remember this: ---------
// Designated init() always go UP in hierarchy.
// Convenience init() always go across in ONE class.

class Person {
    var name: String
    var salaryInUsd: Double
    
    //Designated init
    init(name: String, salaryInUsd: Double) {
        self.name = name
        self.salaryInUsd = salaryInUsd
    }
    
    // convenience - –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è init() –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–≥–æ init()
    // –í –∫–æ–Ω–µ—á–Ω–æ–º —Å—á–µ—Ç–µ –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Designated init()
    
    convenience init(name: String, salaryInBTC: Double) {
        self.init(name: name, salaryInUsd: salaryInBTC * 43000)
        self.name += "yeee"
    }
}

// –ò–µ—Ä–∞—Ä—Ö–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:
// –ü—Ä–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –°–ù–ê–ß–ê–õ–ê —Å–≤–æ–∏ –ø—Ä–æ–ø–µ—Ä—Ç–∏
// –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ–ø–µ—Ä—Ç–∏ –ë–ê–ó–û–í–û–ì–û –∫–ª–∞—Å—Å–∞

class Programmer: Person {
    var language: String
    
    init(language: String, name: String, salary: Double) {
        self.language = language     // –°–≤–æ–∏ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª
        self.language += " üôå"    // –°–≤–æ–∏ –ø—Ä–æ–ø–µ—Ä—Ç–∏ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
        super.init(name: name, salaryInUsd: salary) // Calling the designated initializer of the superclass
        self.name += " ‚ö°Ô∏è" // –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å

    }
    
  
}

var IOSDeveloper = Programmer(language: "Swift", name: "Mike", salary: 900)
print(IOSDeveloper.language)
print(IOSDeveloper.name)

var person = Person(name: "Mike", salaryInBTC: 0.12)
person.name
person.salaryInUsd



// Failable init
// if <condition>   {return nil}

class Worker {
    var name: String
    var salary: Int
    
    init?(name: String, salaryUAH: Int) {
        guard salaryUAH >= 10000 else { return nil }
        self.name = name
        self.salary = salaryUAH
    }
}

var newWorker = Worker(name: "Steve", salaryUAH: 11300) // nill

// Failiable init() with Enums
enum Planets {
    case earth, mars, jupiter
    
    init?(num: Int) {
        switch num {
        case 1: self = .earth
        case 2: self = .jupiter
        case 3: self = .mars
        default: return nil
        }
    }
    
    }

var plantet1 = Planets(num: 1)



enum Phone {
    case Iphone, Samsung, Xiaomi
    
    init?(batteryTime: Int) {
        switch batteryTime {
        case 0...5: self = .Xiaomi
        case 6...10: self = .Samsung
        case 11...15: self = .Iphone
        default: return nil
        }
    }
}

let xiomiUser = Phone(batteryTime: 15)


// required init - –≤—Å–µ —Å–∞–±–∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä

class Car {
    var brand: String
    
    required init(brand: String) {
        self.brand = brand
    }
    
    init() {
        self.brand = "Mercedes"
    }
}

class ToyCar: Car {
    var weight: Int
    
    init(weight: Int, brand: String) {
        self.weight = weight
        super.init(brand: brand)
        if brand == "Mercedes" { self.brand += " üòà"}
    }
    
    required init( brand: String) {
        self.weight = 1
        super.init(brand: brand)
    }
    
}

var myFirstCar = Car()
myFirstCar.brand
var myToyCar = ToyCar(weight: 1, brand: "Mercedes")
print(myToyCar.brand)
